// Generated by gencpp from file state_estimator_msgs/leg_odometry.msg
// DO NOT EDIT!


#ifndef STATE_ESTIMATOR_MSGS_MESSAGE_LEG_ODOMETRY_H
#define STATE_ESTIMATOR_MSGS_MESSAGE_LEG_ODOMETRY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace state_estimator_msgs
{
template <class ContainerAllocator>
struct leg_odometry_
{
  typedef leg_odometry_<ContainerAllocator> Type;

  leg_odometry_()
    : header()
    , lin_vel_lf()
    , lin_vel_rf()
    , lin_vel_lh()
    , lin_vel_rh()
    , base_velocity()
    , stance_lf(false)
    , stance_rf(false)
    , stance_lh(false)
    , stance_rh(false)  {
      lin_vel_lf.assign(0.0);

      lin_vel_rf.assign(0.0);

      lin_vel_lh.assign(0.0);

      lin_vel_rh.assign(0.0);

      base_velocity.assign(0.0);
  }
  leg_odometry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lin_vel_lf()
    , lin_vel_rf()
    , lin_vel_lh()
    , lin_vel_rh()
    , base_velocity()
    , stance_lf(false)
    , stance_rf(false)
    , stance_lh(false)
    , stance_rh(false)  {
  (void)_alloc;
      lin_vel_lf.assign(0.0);

      lin_vel_rf.assign(0.0);

      lin_vel_lh.assign(0.0);

      lin_vel_rh.assign(0.0);

      base_velocity.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 3>  _lin_vel_lf_type;
  _lin_vel_lf_type lin_vel_lf;

   typedef boost::array<double, 3>  _lin_vel_rf_type;
  _lin_vel_rf_type lin_vel_rf;

   typedef boost::array<double, 3>  _lin_vel_lh_type;
  _lin_vel_lh_type lin_vel_lh;

   typedef boost::array<double, 3>  _lin_vel_rh_type;
  _lin_vel_rh_type lin_vel_rh;

   typedef boost::array<double, 3>  _base_velocity_type;
  _base_velocity_type base_velocity;

   typedef uint8_t _stance_lf_type;
  _stance_lf_type stance_lf;

   typedef uint8_t _stance_rf_type;
  _stance_rf_type stance_rf;

   typedef uint8_t _stance_lh_type;
  _stance_lh_type stance_lh;

   typedef uint8_t _stance_rh_type;
  _stance_rh_type stance_rh;





  typedef boost::shared_ptr< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> const> ConstPtr;

}; // struct leg_odometry_

typedef ::state_estimator_msgs::leg_odometry_<std::allocator<void> > leg_odometry;

typedef boost::shared_ptr< ::state_estimator_msgs::leg_odometry > leg_odometryPtr;
typedef boost::shared_ptr< ::state_estimator_msgs::leg_odometry const> leg_odometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_estimator_msgs::leg_odometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_estimator_msgs::leg_odometry_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::leg_odometry_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lin_vel_lf == rhs.lin_vel_lf &&
    lhs.lin_vel_rf == rhs.lin_vel_rf &&
    lhs.lin_vel_lh == rhs.lin_vel_lh &&
    lhs.lin_vel_rh == rhs.lin_vel_rh &&
    lhs.base_velocity == rhs.base_velocity &&
    lhs.stance_lf == rhs.stance_lf &&
    lhs.stance_rf == rhs.stance_rf &&
    lhs.stance_lh == rhs.stance_lh &&
    lhs.stance_rh == rhs.stance_rh;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_estimator_msgs::leg_odometry_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::leg_odometry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_estimator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d1be3f0837dc21a71a6cc54730caa1c";
  }

  static const char* value(const ::state_estimator_msgs::leg_odometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d1be3f0837dc21aULL;
  static const uint64_t static_value2 = 0x71a6cc54730caa1cULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_estimator_msgs/leg_odometry";
  }

  static const char* value(const ::state_estimator_msgs::leg_odometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64[3] lin_vel_lf\n"
"float64[3] lin_vel_rf\n"
"float64[3] lin_vel_lh\n"
"float64[3] lin_vel_rh\n"
"\n"
"float64[3] base_velocity\n"
"\n"
"bool stance_lf\n"
"bool stance_rf\n"
"bool stance_lh\n"
"bool stance_rh\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::state_estimator_msgs::leg_odometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lin_vel_lf);
      stream.next(m.lin_vel_rf);
      stream.next(m.lin_vel_lh);
      stream.next(m.lin_vel_rh);
      stream.next(m.base_velocity);
      stream.next(m.stance_lf);
      stream.next(m.stance_rf);
      stream.next(m.stance_lh);
      stream.next(m.stance_rh);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct leg_odometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimator_msgs::leg_odometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_estimator_msgs::leg_odometry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lin_vel_lf[]" << std::endl;
    for (size_t i = 0; i < v.lin_vel_lf.size(); ++i)
    {
      s << indent << "  lin_vel_lf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lin_vel_lf[i]);
    }
    s << indent << "lin_vel_rf[]" << std::endl;
    for (size_t i = 0; i < v.lin_vel_rf.size(); ++i)
    {
      s << indent << "  lin_vel_rf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lin_vel_rf[i]);
    }
    s << indent << "lin_vel_lh[]" << std::endl;
    for (size_t i = 0; i < v.lin_vel_lh.size(); ++i)
    {
      s << indent << "  lin_vel_lh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lin_vel_lh[i]);
    }
    s << indent << "lin_vel_rh[]" << std::endl;
    for (size_t i = 0; i < v.lin_vel_rh.size(); ++i)
    {
      s << indent << "  lin_vel_rh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lin_vel_rh[i]);
    }
    s << indent << "base_velocity[]" << std::endl;
    for (size_t i = 0; i < v.base_velocity.size(); ++i)
    {
      s << indent << "  base_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.base_velocity[i]);
    }
    s << indent << "stance_lf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stance_lf);
    s << indent << "stance_rf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stance_rf);
    s << indent << "stance_lh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stance_lh);
    s << indent << "stance_rh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stance_rh);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATOR_MSGS_MESSAGE_LEG_ODOMETRY_H
