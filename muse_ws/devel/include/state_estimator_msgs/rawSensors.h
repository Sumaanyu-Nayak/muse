// Generated by gencpp from file state_estimator_msgs/rawSensors.msg
// DO NOT EDIT!


#ifndef STATE_ESTIMATOR_MSGS_MESSAGE_RAWSENSORS_H
#define STATE_ESTIMATOR_MSGS_MESSAGE_RAWSENSORS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <state_estimator_msgs/actuatorForces.h>
#include <state_estimator_msgs/imu.h>
#include <state_estimator_msgs/imu.h>
#include <state_estimator_msgs/timeSync.h>

namespace state_estimator_msgs
{
template <class ContainerAllocator>
struct rawSensors_
{
  typedef rawSensors_<ContainerAllocator> Type;

  rawSensors_()
    : header()
    , tau()
    , imu()
    , imu_secondary()
    , time_sync()  {
    }
  rawSensors_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tau(_alloc)
    , imu(_alloc)
    , imu_secondary(_alloc)
    , time_sync(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::state_estimator_msgs::actuatorForces_<ContainerAllocator>  _tau_type;
  _tau_type tau;

   typedef  ::state_estimator_msgs::imu_<ContainerAllocator>  _imu_type;
  _imu_type imu;

   typedef  ::state_estimator_msgs::imu_<ContainerAllocator>  _imu_secondary_type;
  _imu_secondary_type imu_secondary;

   typedef  ::state_estimator_msgs::timeSync_<ContainerAllocator>  _time_sync_type;
  _time_sync_type time_sync;





  typedef boost::shared_ptr< ::state_estimator_msgs::rawSensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimator_msgs::rawSensors_<ContainerAllocator> const> ConstPtr;

}; // struct rawSensors_

typedef ::state_estimator_msgs::rawSensors_<std::allocator<void> > rawSensors;

typedef boost::shared_ptr< ::state_estimator_msgs::rawSensors > rawSensorsPtr;
typedef boost::shared_ptr< ::state_estimator_msgs::rawSensors const> rawSensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_estimator_msgs::rawSensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_estimator_msgs::rawSensors_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::rawSensors_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tau == rhs.tau &&
    lhs.imu == rhs.imu &&
    lhs.imu_secondary == rhs.imu_secondary &&
    lhs.time_sync == rhs.time_sync;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_estimator_msgs::rawSensors_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::rawSensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_estimator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::rawSensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::rawSensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::rawSensors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bf8247f04179d165127b1c3762c3128";
  }

  static const char* value(const ::state_estimator_msgs::rawSensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bf8247f04179d16ULL;
  static const uint64_t static_value2 = 0x5127b1c3762c3128ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_estimator_msgs/rawSensors";
  }

  static const char* value(const ::state_estimator_msgs::rawSensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"actuatorForces tau\n"
"imu imu\n"
"imu imu_secondary\n"
"timeSync time_sync\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: state_estimator_msgs/actuatorForces\n"
"float64[12] tau\n"
"\n"
"================================================================================\n"
"MSG: state_estimator_msgs/imu\n"
"float64[3] w\n"
"float64[3] a\n"
"\n"
"================================================================================\n"
"MSG: state_estimator_msgs/timeSync\n"
;
  }

  static const char* value(const ::state_estimator_msgs::rawSensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tau);
      stream.next(m.imu);
      stream.next(m.imu_secondary);
      stream.next(m.time_sync);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rawSensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimator_msgs::rawSensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_estimator_msgs::rawSensors_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tau: ";
    s << std::endl;
    Printer< ::state_estimator_msgs::actuatorForces_<ContainerAllocator> >::stream(s, indent + "  ", v.tau);
    s << indent << "imu: ";
    s << std::endl;
    Printer< ::state_estimator_msgs::imu_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    s << indent << "imu_secondary: ";
    s << std::endl;
    Printer< ::state_estimator_msgs::imu_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_secondary);
    s << indent << "time_sync: ";
    s << std::endl;
    Printer< ::state_estimator_msgs::timeSync_<ContainerAllocator> >::stream(s, indent + "  ", v.time_sync);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATOR_MSGS_MESSAGE_RAWSENSORS_H
