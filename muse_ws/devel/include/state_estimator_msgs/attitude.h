// Generated by gencpp from file state_estimator_msgs/attitude.msg
// DO NOT EDIT!


#ifndef STATE_ESTIMATOR_MSGS_MESSAGE_ATTITUDE_H
#define STATE_ESTIMATOR_MSGS_MESSAGE_ATTITUDE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace state_estimator_msgs
{
template <class ContainerAllocator>
struct attitude_
{
  typedef attitude_<ContainerAllocator> Type;

  attitude_()
    : header()
    , quaternion()
    , roll_deg(0.0)
    , pitch_deg(0.0)
    , yaw_deg(0.0)
    , angular_velocity()  {
      quaternion.assign(0.0);

      angular_velocity.assign(0.0);
  }
  attitude_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , quaternion()
    , roll_deg(0.0)
    , pitch_deg(0.0)
    , yaw_deg(0.0)
    , angular_velocity()  {
  (void)_alloc;
      quaternion.assign(0.0);

      angular_velocity.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 4>  _quaternion_type;
  _quaternion_type quaternion;

   typedef double _roll_deg_type;
  _roll_deg_type roll_deg;

   typedef double _pitch_deg_type;
  _pitch_deg_type pitch_deg;

   typedef double _yaw_deg_type;
  _yaw_deg_type yaw_deg;

   typedef boost::array<double, 3>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::state_estimator_msgs::attitude_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimator_msgs::attitude_<ContainerAllocator> const> ConstPtr;

}; // struct attitude_

typedef ::state_estimator_msgs::attitude_<std::allocator<void> > attitude;

typedef boost::shared_ptr< ::state_estimator_msgs::attitude > attitudePtr;
typedef boost::shared_ptr< ::state_estimator_msgs::attitude const> attitudeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_estimator_msgs::attitude_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_estimator_msgs::attitude_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_estimator_msgs::attitude_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::attitude_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.quaternion == rhs.quaternion &&
    lhs.roll_deg == rhs.roll_deg &&
    lhs.pitch_deg == rhs.pitch_deg &&
    lhs.yaw_deg == rhs.yaw_deg &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_estimator_msgs::attitude_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::attitude_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_estimator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::attitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::attitude_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::attitude_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::attitude_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_estimator_msgs::attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecef9a2429ca3b3adda042fe513a909a";
  }

  static const char* value(const ::state_estimator_msgs::attitude_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecef9a2429ca3b3aULL;
  static const uint64_t static_value2 = 0xdda042fe513a909aULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimator_msgs::attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_estimator_msgs/attitude";
  }

  static const char* value(const ::state_estimator_msgs::attitude_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_estimator_msgs::attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64[4] quaternion\n"
"float64 roll_deg\n"
"float64 pitch_deg\n"
"float64 yaw_deg \n"
"float64[3] angular_velocity\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::state_estimator_msgs::attitude_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_estimator_msgs::attitude_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.quaternion);
      stream.next(m.roll_deg);
      stream.next(m.pitch_deg);
      stream.next(m.yaw_deg);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct attitude_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimator_msgs::attitude_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_estimator_msgs::attitude_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "quaternion[]" << std::endl;
    for (size_t i = 0; i < v.quaternion.size(); ++i)
    {
      s << indent << "  quaternion[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.quaternion[i]);
    }
    s << indent << "roll_deg: ";
    Printer<double>::stream(s, indent + "  ", v.roll_deg);
    s << indent << "pitch_deg: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_deg);
    s << indent << "yaw_deg: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_deg);
    s << indent << "angular_velocity[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      s << indent << "  angular_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angular_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATOR_MSGS_MESSAGE_ATTITUDE_H
