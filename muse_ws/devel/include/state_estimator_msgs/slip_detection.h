// Generated by gencpp from file state_estimator_msgs/slip_detection.msg
// DO NOT EDIT!


#ifndef STATE_ESTIMATOR_MSGS_MESSAGE_SLIP_DETECTION_H
#define STATE_ESTIMATOR_MSGS_MESSAGE_SLIP_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace state_estimator_msgs
{
template <class ContainerAllocator>
struct slip_detection_
{
  typedef slip_detection_<ContainerAllocator> Type;

  slip_detection_()
    : legs_slipping()
    , slip_lf(false)
    , slip_rf(false)
    , slip_lh(false)
    , slip_rh(false)
    , slippage(false)  {
      legs_slipping.assign(0.0);
  }
  slip_detection_(const ContainerAllocator& _alloc)
    : legs_slipping()
    , slip_lf(false)
    , slip_rf(false)
    , slip_lh(false)
    , slip_rh(false)
    , slippage(false)  {
  (void)_alloc;
      legs_slipping.assign(0.0);
  }



   typedef boost::array<double, 4>  _legs_slipping_type;
  _legs_slipping_type legs_slipping;

   typedef uint8_t _slip_lf_type;
  _slip_lf_type slip_lf;

   typedef uint8_t _slip_rf_type;
  _slip_rf_type slip_rf;

   typedef uint8_t _slip_lh_type;
  _slip_lh_type slip_lh;

   typedef uint8_t _slip_rh_type;
  _slip_rh_type slip_rh;

   typedef uint8_t _slippage_type;
  _slippage_type slippage;





  typedef boost::shared_ptr< ::state_estimator_msgs::slip_detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimator_msgs::slip_detection_<ContainerAllocator> const> ConstPtr;

}; // struct slip_detection_

typedef ::state_estimator_msgs::slip_detection_<std::allocator<void> > slip_detection;

typedef boost::shared_ptr< ::state_estimator_msgs::slip_detection > slip_detectionPtr;
typedef boost::shared_ptr< ::state_estimator_msgs::slip_detection const> slip_detectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_estimator_msgs::slip_detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_estimator_msgs::slip_detection_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::slip_detection_<ContainerAllocator2> & rhs)
{
  return lhs.legs_slipping == rhs.legs_slipping &&
    lhs.slip_lf == rhs.slip_lf &&
    lhs.slip_rf == rhs.slip_rf &&
    lhs.slip_lh == rhs.slip_lh &&
    lhs.slip_rh == rhs.slip_rh &&
    lhs.slippage == rhs.slippage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_estimator_msgs::slip_detection_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::slip_detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_estimator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::slip_detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::slip_detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::slip_detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87252336384194759607e2e036859110";
  }

  static const char* value(const ::state_estimator_msgs::slip_detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8725233638419475ULL;
  static const uint64_t static_value2 = 0x9607e2e036859110ULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_estimator_msgs/slip_detection";
  }

  static const char* value(const ::state_estimator_msgs::slip_detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[4] legs_slipping\n"
"bool slip_lf\n"
"bool slip_rf\n"
"bool slip_lh\n"
"bool slip_rh\n"
"bool slippage\n"
;
  }

  static const char* value(const ::state_estimator_msgs::slip_detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.legs_slipping);
      stream.next(m.slip_lf);
      stream.next(m.slip_rf);
      stream.next(m.slip_lh);
      stream.next(m.slip_rh);
      stream.next(m.slippage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct slip_detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimator_msgs::slip_detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_estimator_msgs::slip_detection_<ContainerAllocator>& v)
  {
    s << indent << "legs_slipping[]" << std::endl;
    for (size_t i = 0; i < v.legs_slipping.size(); ++i)
    {
      s << indent << "  legs_slipping[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.legs_slipping[i]);
    }
    s << indent << "slip_lf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slip_lf);
    s << indent << "slip_rf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slip_rf);
    s << indent << "slip_lh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slip_lh);
    s << indent << "slip_rh: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slip_rh);
    s << indent << "slippage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slippage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATOR_MSGS_MESSAGE_SLIP_DETECTION_H
