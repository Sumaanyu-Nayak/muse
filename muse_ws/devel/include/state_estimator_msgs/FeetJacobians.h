// Generated by gencpp from file state_estimator_msgs/FeetJacobians.msg
// DO NOT EDIT!


#ifndef STATE_ESTIMATOR_MSGS_MESSAGE_FEETJACOBIANS_H
#define STATE_ESTIMATOR_MSGS_MESSAGE_FEETJACOBIANS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace state_estimator_msgs
{
template <class ContainerAllocator>
struct FeetJacobians_
{
  typedef FeetJacobians_<ContainerAllocator> Type;

  FeetJacobians_()
    : lf()
    , rf()
    , lh()
    , rh()  {
      lf.assign(0.0);

      rf.assign(0.0);

      lh.assign(0.0);

      rh.assign(0.0);
  }
  FeetJacobians_(const ContainerAllocator& _alloc)
    : lf()
    , rf()
    , lh()
    , rh()  {
  (void)_alloc;
      lf.assign(0.0);

      rf.assign(0.0);

      lh.assign(0.0);

      rh.assign(0.0);
  }



   typedef boost::array<double, 9>  _lf_type;
  _lf_type lf;

   typedef boost::array<double, 9>  _rf_type;
  _rf_type rf;

   typedef boost::array<double, 9>  _lh_type;
  _lh_type lh;

   typedef boost::array<double, 9>  _rh_type;
  _rh_type rh;





  typedef boost::shared_ptr< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> const> ConstPtr;

}; // struct FeetJacobians_

typedef ::state_estimator_msgs::FeetJacobians_<std::allocator<void> > FeetJacobians;

typedef boost::shared_ptr< ::state_estimator_msgs::FeetJacobians > FeetJacobiansPtr;
typedef boost::shared_ptr< ::state_estimator_msgs::FeetJacobians const> FeetJacobiansConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator2> & rhs)
{
  return lhs.lf == rhs.lf &&
    lhs.rf == rhs.rf &&
    lhs.lh == rhs.lh &&
    lhs.rh == rhs.rh;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator1> & lhs, const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_estimator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c109ea601aeb1745edc38521e6c4252c";
  }

  static const char* value(const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc109ea601aeb1745ULL;
  static const uint64_t static_value2 = 0xedc38521e6c4252cULL;
};

template<class ContainerAllocator>
struct DataType< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_estimator_msgs/FeetJacobians";
  }

  static const char* value(const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[9] lf\n"
"float64[9] rf\n"
"float64[9] lh\n"
"float64[9] rh\n"
"\n"
;
  }

  static const char* value(const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lf);
      stream.next(m.rf);
      stream.next(m.lh);
      stream.next(m.rh);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeetJacobians_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_estimator_msgs::FeetJacobians_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_estimator_msgs::FeetJacobians_<ContainerAllocator>& v)
  {
    s << indent << "lf[]" << std::endl;
    for (size_t i = 0; i < v.lf.size(); ++i)
    {
      s << indent << "  lf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lf[i]);
    }
    s << indent << "rf[]" << std::endl;
    for (size_t i = 0; i < v.rf.size(); ++i)
    {
      s << indent << "  rf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rf[i]);
    }
    s << indent << "lh[]" << std::endl;
    for (size_t i = 0; i < v.lh.size(); ++i)
    {
      s << indent << "  lh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lh[i]);
    }
    s << indent << "rh[]" << std::endl;
    for (size_t i = 0; i < v.rh.size(); ++i)
    {
      s << indent << "  rh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rh[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_ESTIMATOR_MSGS_MESSAGE_FEETJACOBIANS_H
