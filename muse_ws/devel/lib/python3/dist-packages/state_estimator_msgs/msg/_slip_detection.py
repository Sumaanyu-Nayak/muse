# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from state_estimator_msgs/slip_detection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class slip_detection(genpy.Message):
  _md5sum = "87252336384194759607e2e036859110"
  _type = "state_estimator_msgs/slip_detection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[4] legs_slipping
bool slip_lf
bool slip_rf
bool slip_lh
bool slip_rh
bool slippage"""
  __slots__ = ['legs_slipping','slip_lf','slip_rf','slip_lh','slip_rh','slippage']
  _slot_types = ['float64[4]','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       legs_slipping,slip_lf,slip_rf,slip_lh,slip_rh,slippage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(slip_detection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.legs_slipping is None:
        self.legs_slipping = [0.] * 4
      if self.slip_lf is None:
        self.slip_lf = False
      if self.slip_rf is None:
        self.slip_rf = False
      if self.slip_lh is None:
        self.slip_lh = False
      if self.slip_rh is None:
        self.slip_rh = False
      if self.slippage is None:
        self.slippage = False
    else:
      self.legs_slipping = [0.] * 4
      self.slip_lf = False
      self.slip_rf = False
      self.slip_lh = False
      self.slip_rh = False
      self.slippage = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_4d().pack(*self.legs_slipping))
      _x = self
      buff.write(_get_struct_5B().pack(_x.slip_lf, _x.slip_rf, _x.slip_lh, _x.slip_rh, _x.slippage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.legs_slipping = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 5
      (_x.slip_lf, _x.slip_rf, _x.slip_lh, _x.slip_rh, _x.slippage,) = _get_struct_5B().unpack(str[start:end])
      self.slip_lf = bool(self.slip_lf)
      self.slip_rf = bool(self.slip_rf)
      self.slip_lh = bool(self.slip_lh)
      self.slip_rh = bool(self.slip_rh)
      self.slippage = bool(self.slippage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.legs_slipping.tostring())
      _x = self
      buff.write(_get_struct_5B().pack(_x.slip_lf, _x.slip_rf, _x.slip_lh, _x.slip_rh, _x.slippage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 32
      self.legs_slipping = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 5
      (_x.slip_lf, _x.slip_rf, _x.slip_lh, _x.slip_rh, _x.slippage,) = _get_struct_5B().unpack(str[start:end])
      self.slip_lf = bool(self.slip_lf)
      self.slip_rf = bool(self.slip_rf)
      self.slip_lh = bool(self.slip_lh)
      self.slip_rh = bool(self.slip_rh)
      self.slippage = bool(self.slippage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
