# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from state_estimator_msgs/rawSensors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import state_estimator_msgs.msg
import std_msgs.msg

class rawSensors(genpy.Message):
  _md5sum = "1bf8247f04179d165127b1c3762c3128"
  _type = "state_estimator_msgs/rawSensors"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
actuatorForces tau
imu imu
imu imu_secondary
timeSync time_sync

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: state_estimator_msgs/actuatorForces
float64[12] tau

================================================================================
MSG: state_estimator_msgs/imu
float64[3] w
float64[3] a

================================================================================
MSG: state_estimator_msgs/timeSync
"""
  __slots__ = ['header','tau','imu','imu_secondary','time_sync']
  _slot_types = ['std_msgs/Header','state_estimator_msgs/actuatorForces','state_estimator_msgs/imu','state_estimator_msgs/imu','state_estimator_msgs/timeSync']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tau,imu,imu_secondary,time_sync

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rawSensors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tau is None:
        self.tau = state_estimator_msgs.msg.actuatorForces()
      if self.imu is None:
        self.imu = state_estimator_msgs.msg.imu()
      if self.imu_secondary is None:
        self.imu_secondary = state_estimator_msgs.msg.imu()
      if self.time_sync is None:
        self.time_sync = state_estimator_msgs.msg.timeSync()
    else:
      self.header = std_msgs.msg.Header()
      self.tau = state_estimator_msgs.msg.actuatorForces()
      self.imu = state_estimator_msgs.msg.imu()
      self.imu_secondary = state_estimator_msgs.msg.imu()
      self.time_sync = state_estimator_msgs.msg.timeSync()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_12d().pack(*self.tau.tau))
      buff.write(_get_struct_3d().pack(*self.imu.w))
      buff.write(_get_struct_3d().pack(*self.imu.a))
      buff.write(_get_struct_3d().pack(*self.imu_secondary.w))
      buff.write(_get_struct_3d().pack(*self.imu_secondary.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tau is None:
        self.tau = state_estimator_msgs.msg.actuatorForces()
      if self.imu is None:
        self.imu = state_estimator_msgs.msg.imu()
      if self.imu_secondary is None:
        self.imu_secondary = state_estimator_msgs.msg.imu()
      if self.time_sync is None:
        self.time_sync = state_estimator_msgs.msg.timeSync()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 96
      self.tau.tau = _get_struct_12d().unpack(str[start:end])
      start = end
      end += 24
      self.imu.w = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.imu.a = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.imu_secondary.w = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.imu_secondary.a = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.tau.tau.tostring())
      buff.write(self.imu.w.tostring())
      buff.write(self.imu.a.tostring())
      buff.write(self.imu_secondary.w.tostring())
      buff.write(self.imu_secondary.a.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tau is None:
        self.tau = state_estimator_msgs.msg.actuatorForces()
      if self.imu is None:
        self.imu = state_estimator_msgs.msg.imu()
      if self.imu_secondary is None:
        self.imu_secondary = state_estimator_msgs.msg.imu()
      if self.time_sync is None:
        self.time_sync = state_estimator_msgs.msg.timeSync()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 96
      self.tau.tau = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 24
      self.imu.w = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.imu.a = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.imu_secondary.w = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.imu_secondary.a = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d = None
def _get_struct_12d():
    global _struct_12d
    if _struct_12d is None:
        _struct_12d = struct.Struct("<12d")
    return _struct_12d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
