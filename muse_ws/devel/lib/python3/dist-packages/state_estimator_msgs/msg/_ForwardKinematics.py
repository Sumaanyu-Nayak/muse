# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from state_estimator_msgs/ForwardKinematics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ForwardKinematics(genpy.Message):
  _md5sum = "ae408d1e170b8d8b6fa4c83a5b6670c0"
  _type = "state_estimator_msgs/ForwardKinematics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[16] lf_haa
float64[16] rf_haa
float64[16] lh_haa
float64[16] rh_haa

float64[16] lf_hfe
float64[16] rf_hfe
float64[16] lh_hfe
float64[16] rh_hfe

float64[16] lf_kfe
float64[16] rf_kfe
float64[16] lh_kfe
float64[16] rh_kfe

float64[16] lf_foot
float64[16] rf_foot
float64[16] lh_foot
float64[16] rh_foot
"""
  __slots__ = ['lf_haa','rf_haa','lh_haa','rh_haa','lf_hfe','rf_hfe','lh_hfe','rh_hfe','lf_kfe','rf_kfe','lh_kfe','rh_kfe','lf_foot','rf_foot','lh_foot','rh_foot']
  _slot_types = ['float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]','float64[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lf_haa,rf_haa,lh_haa,rh_haa,lf_hfe,rf_hfe,lh_hfe,rh_hfe,lf_kfe,rf_kfe,lh_kfe,rh_kfe,lf_foot,rf_foot,lh_foot,rh_foot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ForwardKinematics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lf_haa is None:
        self.lf_haa = [0.] * 16
      if self.rf_haa is None:
        self.rf_haa = [0.] * 16
      if self.lh_haa is None:
        self.lh_haa = [0.] * 16
      if self.rh_haa is None:
        self.rh_haa = [0.] * 16
      if self.lf_hfe is None:
        self.lf_hfe = [0.] * 16
      if self.rf_hfe is None:
        self.rf_hfe = [0.] * 16
      if self.lh_hfe is None:
        self.lh_hfe = [0.] * 16
      if self.rh_hfe is None:
        self.rh_hfe = [0.] * 16
      if self.lf_kfe is None:
        self.lf_kfe = [0.] * 16
      if self.rf_kfe is None:
        self.rf_kfe = [0.] * 16
      if self.lh_kfe is None:
        self.lh_kfe = [0.] * 16
      if self.rh_kfe is None:
        self.rh_kfe = [0.] * 16
      if self.lf_foot is None:
        self.lf_foot = [0.] * 16
      if self.rf_foot is None:
        self.rf_foot = [0.] * 16
      if self.lh_foot is None:
        self.lh_foot = [0.] * 16
      if self.rh_foot is None:
        self.rh_foot = [0.] * 16
    else:
      self.lf_haa = [0.] * 16
      self.rf_haa = [0.] * 16
      self.lh_haa = [0.] * 16
      self.rh_haa = [0.] * 16
      self.lf_hfe = [0.] * 16
      self.rf_hfe = [0.] * 16
      self.lh_hfe = [0.] * 16
      self.rh_hfe = [0.] * 16
      self.lf_kfe = [0.] * 16
      self.rf_kfe = [0.] * 16
      self.lh_kfe = [0.] * 16
      self.rh_kfe = [0.] * 16
      self.lf_foot = [0.] * 16
      self.rf_foot = [0.] * 16
      self.lh_foot = [0.] * 16
      self.rh_foot = [0.] * 16

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_16d().pack(*self.lf_haa))
      buff.write(_get_struct_16d().pack(*self.rf_haa))
      buff.write(_get_struct_16d().pack(*self.lh_haa))
      buff.write(_get_struct_16d().pack(*self.rh_haa))
      buff.write(_get_struct_16d().pack(*self.lf_hfe))
      buff.write(_get_struct_16d().pack(*self.rf_hfe))
      buff.write(_get_struct_16d().pack(*self.lh_hfe))
      buff.write(_get_struct_16d().pack(*self.rh_hfe))
      buff.write(_get_struct_16d().pack(*self.lf_kfe))
      buff.write(_get_struct_16d().pack(*self.rf_kfe))
      buff.write(_get_struct_16d().pack(*self.lh_kfe))
      buff.write(_get_struct_16d().pack(*self.rh_kfe))
      buff.write(_get_struct_16d().pack(*self.lf_foot))
      buff.write(_get_struct_16d().pack(*self.rf_foot))
      buff.write(_get_struct_16d().pack(*self.lh_foot))
      buff.write(_get_struct_16d().pack(*self.rh_foot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 128
      self.lf_haa = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rf_haa = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.lh_haa = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rh_haa = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.lf_hfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rf_hfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.lh_hfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rh_hfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.lf_kfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rf_kfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.lh_kfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rh_kfe = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.lf_foot = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rf_foot = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.lh_foot = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 128
      self.rh_foot = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.lf_haa.tostring())
      buff.write(self.rf_haa.tostring())
      buff.write(self.lh_haa.tostring())
      buff.write(self.rh_haa.tostring())
      buff.write(self.lf_hfe.tostring())
      buff.write(self.rf_hfe.tostring())
      buff.write(self.lh_hfe.tostring())
      buff.write(self.rh_hfe.tostring())
      buff.write(self.lf_kfe.tostring())
      buff.write(self.rf_kfe.tostring())
      buff.write(self.lh_kfe.tostring())
      buff.write(self.rh_kfe.tostring())
      buff.write(self.lf_foot.tostring())
      buff.write(self.rf_foot.tostring())
      buff.write(self.lh_foot.tostring())
      buff.write(self.rh_foot.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 128
      self.lf_haa = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rf_haa = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.lh_haa = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rh_haa = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.lf_hfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rf_hfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.lh_hfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rh_hfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.lf_kfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rf_kfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.lh_kfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rh_kfe = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.lf_foot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rf_foot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.lh_foot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 128
      self.rh_foot = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
