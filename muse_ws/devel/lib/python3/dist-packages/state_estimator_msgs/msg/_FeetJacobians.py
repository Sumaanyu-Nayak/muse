# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from state_estimator_msgs/FeetJacobians.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FeetJacobians(genpy.Message):
  _md5sum = "c109ea601aeb1745edc38521e6c4252c"
  _type = "state_estimator_msgs/FeetJacobians"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[9] lf
float64[9] rf
float64[9] lh
float64[9] rh

"""
  __slots__ = ['lf','rf','lh','rh']
  _slot_types = ['float64[9]','float64[9]','float64[9]','float64[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lf,rf,lh,rh

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FeetJacobians, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lf is None:
        self.lf = [0.] * 9
      if self.rf is None:
        self.rf = [0.] * 9
      if self.lh is None:
        self.lh = [0.] * 9
      if self.rh is None:
        self.rh = [0.] * 9
    else:
      self.lf = [0.] * 9
      self.rf = [0.] * 9
      self.lh = [0.] * 9
      self.rh = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_9d().pack(*self.lf))
      buff.write(_get_struct_9d().pack(*self.rf))
      buff.write(_get_struct_9d().pack(*self.lh))
      buff.write(_get_struct_9d().pack(*self.rh))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 72
      self.lf = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.rf = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.lh = _get_struct_9d().unpack(str[start:end])
      start = end
      end += 72
      self.rh = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.lf.tostring())
      buff.write(self.rf.tostring())
      buff.write(self.lh.tostring())
      buff.write(self.rh.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 72
      self.lf = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.rf = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.lh = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      start = end
      end += 72
      self.rh = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
