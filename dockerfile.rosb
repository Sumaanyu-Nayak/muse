# Multi-stage build for ROS 1 bridge with ROS 2 Humble
# Start with ROS 1 Noetic (Ubuntu 20.04) as base to avoid dependency conflicts
FROM ros:noetic-ros-base as ros1_base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS1_DISTRO=noetic
ENV ROS2_DISTRO=humble

# Install basic tools and dependencies for ROS 1
RUN apt-get update && apt-get install -y \
    software-properties-common \
    curl \
    gnupg2 \
    lsb-release \
    build-essential \
    cmake \
    git \
    libeigen3-dev \
    python3-catkin-tools \
    python3-catkin-pkg \
    python3-rospkg \
    python3-rosdep \
    # Graphics and networking
    libgl1-mesa-dev \
    libgl1-mesa-dri \
    libgl1-mesa-glx \
    libglu1-mesa \
    freeglut3-dev \
    net-tools \
    && rm -rf /var/lib/apt/lists/*

# Add ROS 2 Humble repository to Ubuntu 20.04
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Install ROS 1 Noetic packages (now compatible with base image)
RUN apt-get update && apt-get install -y \
    ros-noetic-ros-core \
    ros-noetic-rosbag \
    ros-noetic-dynamic-reconfigure \
    ros-noetic-pinocchio \
    && rm -rf /var/lib/apt/lists/*

# Install ROS 2 Humble packages
RUN apt-get update && apt-get install -y \
    ros-humble-ros-core \
    ros-humble-pinocchio \
    python3-colcon-common-extensions \
    python3-vcstool \
    && rm -rf /var/lib/apt/lists/*

ENV LIBGL_ALWAYS_SOFTWARE=1
    
# Create workspaces for both ROS 1 and ROS 2
WORKDIR /root
RUN mkdir -p ros1_ws/src && mkdir -p ros2_ws/src

# Setup ROS 1 workspace (catkin)
WORKDIR /root/ros1_ws/src
RUN git clone --branch v0.3.0 https://github.com/PRBonn/kiss-icp.git

# Initialize rosdep
RUN rosdep init || true && rosdep update

# Install ROS 1 dependencies
WORKDIR /root/ros1_ws
RUN rosdep install --from-paths src --ignore-src -r -y --rosdistro=${ROS1_DISTRO}

# Build ROS 1 workspace
RUN /bin/bash -c "source /opt/ros/${ROS1_DISTRO}/setup.bash && \
    catkin build"

# Setup ROS 2 workspace (your state estimator)
WORKDIR /root/ros2_ws/src
# Copy your ROS 2 packages here (will be mounted as volume)

# Build ROS 1 bridge from source
WORKDIR /root/bridge_ws
RUN mkdir -p src && cd src && \
    git clone https://github.com/ros2/ros1_bridge.git

# Install ROS 2 dependencies  
WORKDIR /root/ros2_ws
RUN rosdep install --from-paths src --ignore-src -r -y --rosdistro=${ROS2_DISTRO} || true

# Build the bridge workspace
WORKDIR /root/bridge_ws
RUN /bin/bash -c "source /opt/ros/${ROS1_DISTRO}/setup.bash && \
    source /opt/ros/${ROS2_DISTRO}/setup.bash && \
    source /root/ros1_ws/devel/setup.bash && \
    colcon build --packages-select ros1_bridge --cmake-force-configure"

# Create bridge setup script
RUN echo '#!/bin/bash' > /root/setup_bridge.sh && \
    echo 'source /opt/ros/${ROS1_DISTRO}/setup.bash' >> /root/setup_bridge.sh && \
    echo 'source /opt/ros/${ROS2_DISTRO}/setup.bash' >> /root/setup_bridge.sh && \
    echo 'source /root/ros1_ws/devel/setup.bash' >> /root/setup_bridge.sh && \
    echo 'source /root/bridge_ws/install/setup.bash' >> /root/setup_bridge.sh && \
    echo 'source /root/ros2_ws/install/setup.bash || true' >> /root/setup_bridge.sh && \
    chmod +x /root/setup_bridge.sh

# Create bridge launch script
RUN echo '#!/bin/bash' > /root/start_bridge.sh && \
    echo 'source /root/setup_bridge.sh' >> /root/start_bridge.sh && \
    echo 'ros2 run ros1_bridge dynamic_bridge --bridge-all-topics' >> /root/start_bridge.sh && \
    chmod +x /root/start_bridge.sh

# Setup shell environment
SHELL ["/bin/bash", "-c"]
RUN echo "source /root/setup_bridge.sh" >> ~/.bashrc && \
    echo "echo 'ROS 1 Bridge Environment Ready'" >> ~/.bashrc && \
    echo "echo 'ROS 1 (Noetic): /opt/ros/noetic'" >> ~/.bashrc && \
    echo "echo 'ROS 2 (Humble): /opt/ros/humble'" >> ~/.bashrc && \
    echo "echo 'Bridge: /root/start_bridge.sh'" >> ~/.bashrc && \
    echo "echo 'Workspaces: /root/ros1_ws, /root/ros2_ws, /root/bridge_ws'" >> ~/.bashrc

# Create runtime directory for Qt
RUN mkdir -p /tmp/runtime-root && chmod 700 /tmp/runtime-root
ENV XDG_RUNTIME_DIR=/tmp/runtime-root

# Set working directory
WORKDIR /root

# Default command
CMD ["bash"]